# editorconfig.org
# Generated: Jun 23, 2025 with Visual Studio 17.13.1

# Top-most EditorConfig file, remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

[*]
insert_final_newline = true
indent_style = space
indent_size = 4
trim_trailing_whitespace = true
# end_of_line = crlf # The end_of_line setting is maintained by .gitattributes! Do not set it here!

[*.cs]
charset = utf-8
max_line_length = 130

#### .NET Code Actions ####

# Type members
dotnet_hide_advanced_members = false
dotnet_member_insertion_location = with_other_members_of_the_same_kind
dotnet_property_generation_behavior = prefer_throwing_properties

# Symbol search
dotnet_search_reference_assemblies = true

#### .NET Coding Conventions ####

# Organize usings
# Following options belong to single code style rule IDE0055
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:none
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning

# Expression-level preferences
dotnet_prefer_system_hash_code = true:warning
dotnet_style_coalesce_expression = false:none
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_namespace_match_folder = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_operator_placement_when_wrapping = beginning_of_line:warning
dotnet_style_prefer_auto_properties = true:warning
# We do not want to use this because it is fixing also all .ToList() with [.. ] and that code looks bad.
dotnet_style_prefer_collection_expression = false:none
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = false:none
dotnet_style_prefer_conditional_expression_over_return = false:none
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = all:warning

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:warning
dotnet_style_allow_statement_immediately_after_block_experimental = false:warning

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = false:warning
csharp_style_var_for_built_in_types = false:warning
# This one must be false in order to make csharp_style_implicit_object_creation_when_type_is_apparent work.
# We prefer in C# 9.0+ projects type on left side e.g. `Object o = new();`
csharp_style_var_when_type_is_apparent = false:none

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_lambdas = when_on_single_line:warning
csharp_style_expression_bodied_local_functions = false:warning
csharp_style_expression_bodied_methods = false:warning
csharp_style_expression_bodied_operators = false:warning
# We do not want to use '=>' for properties without backing field.
csharp_style_expression_bodied_properties = true:warning

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_extended_property_pattern = true:warning
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_pattern_matching = true:warning
csharp_style_prefer_switch_expression = true:suggestion

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_prefer_static_anonymous_function = true:suggestion
csharp_prefer_static_local_function = true:suggestion
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async:warning
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion

# Code-block preferences
csharp_prefer_braces = true:suggestion
csharp_prefer_simple_using_statement = true:warning
csharp_prefer_system_threading_lock = true:warning
csharp_style_namespace_declarations = file_scoped:warning
csharp_style_prefer_method_group_conversion = true:warning
csharp_style_prefer_primary_constructors = false:warning
csharp_style_prefer_top_level_statements = true:warning

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = false:warning
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_local_over_anonymous_function = true:warning
csharp_style_prefer_null_check_over_type_check = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_prefer_tuple_swap = false:none
csharp_style_prefer_unbound_generic_type_in_nameof = true:warning
csharp_style_prefer_utf8_string_literals = false:none
csharp_style_throw_expression = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:none
csharp_style_unused_value_expression_statement_preference = discard_variable:none

# 'using' directive preferences
dotnet_diagnostic.IDE0005.severity = warning # Remove unnecessary using directives
csharp_using_directive_placement = outside_namespace:warning

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false:warning
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false:warning
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false:warning
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:warning
csharp_style_allow_embedded_statements_on_same_line_experimental = false:warning

#### C# Formatting Rules ####
# All following `C# Formatting Rules` options are under single code style rule IDE0055
dotnet_diagnostic.IDE0055.severity = warning

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

#### Naming styles ####

# Naming rules

# Interface: IPascalCase
dotnet_naming_rule.interface_should_be_begins_with_i_style.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i_style.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i_style.style = begins_with_i_style

# Type: `class PascalCase`, `struct PascalCase`, `enum PascalCase`
dotnet_naming_rule.type_should_be_pascal_case_style.severity = warning
dotnet_naming_rule.type_should_be_pascal_case_style.symbols = type
dotnet_naming_rule.type_should_be_pascal_case_style.style = pascal_case_style

# Type: `int PascalCase { get; set; };`, `event EventHandler PascalCase;`, `void PascalCase()`
dotnet_naming_rule.non_field_member_should_be_pascal_case_style.severity = warning
dotnet_naming_rule.non_field_member_should_be_pascal_case_style.symbols = non_field_member
dotnet_naming_rule.non_field_member_should_be_pascal_case_style.style = pascal_case_style

# Constant field: PascalCase
dotnet_naming_rule.const_field_should_be_pascal_case_style.severity = warning
dotnet_naming_rule.const_field_should_be_pascal_case_style.symbols = const_field
dotnet_naming_rule.const_field_should_be_pascal_case_style.style = pascal_case_style

# Static field: s_camelCase
dotnet_naming_rule.static_field_should_be_static_prefix_style.severity = warning
dotnet_naming_rule.static_field_should_be_static_prefix_style.symbols = static_field
dotnet_naming_rule.static_field_should_be_static_prefix_style.style = static_prefix_style

# Internal or private field: _camelCase
dotnet_naming_rule.internal_or_private_field_should_be_camel_case_underscore_style.severity = warning
dotnet_naming_rule.internal_or_private_field_should_be_camel_case_underscore_style.symbols = internal_or_private_field
dotnet_naming_rule.internal_or_private_field_should_be_camel_case_underscore_style.style = camel_case_underscore_style

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.type.applicable_kinds = class, struct, enum
dotnet_naming_symbols.type.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.type.required_modifiers =

dotnet_naming_symbols.non_field_member.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_member.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_member.required_modifiers =

dotnet_naming_symbols.const_field.applicable_kinds = field
dotnet_naming_symbols.const_field.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.const_field.required_modifiers = const

dotnet_naming_symbols.static_field.applicable_kinds = field
dotnet_naming_symbols.static_field.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.static_field.required_modifiers = static

dotnet_naming_symbols.internal_or_private_field.applicable_kinds = field
dotnet_naming_symbols.internal_or_private_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.internal_or_private_field.required_modifiers =

# Naming styles

dotnet_naming_style.begins_with_i_style.required_prefix = I
dotnet_naming_style.begins_with_i_style.required_suffix =
dotnet_naming_style.begins_with_i_style.word_separator =
dotnet_naming_style.begins_with_i_style.capitalization = pascal_case

dotnet_naming_style.pascal_case_style.required_prefix =
dotnet_naming_style.pascal_case_style.required_suffix =
dotnet_naming_style.pascal_case_style.word_separator =
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

dotnet_naming_style.static_prefix_style.required_prefix = s_
dotnet_naming_style.static_prefix_style.required_suffix =
dotnet_naming_style.static_prefix_style.word_separator =
dotnet_naming_style.static_prefix_style.capitalization = camel_case

dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.required_suffix =
dotnet_naming_style.camel_case_underscore_style.word_separator =
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

#### Code Quality Analyzers ####
dotnet_diagnostic.CA1716.severity = none # We have common classes in Shared folder and Shared is reserved keyword
dotnet_code_quality.CA1802.api_surface = private, internal # Run only against the non-public API surface
dotnet_diagnostic.CA2007.severity = none # We do not need to call ConfigureAwait(false) in our codebase

